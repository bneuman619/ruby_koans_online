%section#the_path
  %h2 The Path to Enlightenment

  %p
    Each page consists of a number of tests that you have to complete and any information you
    might require to help you make those test pass.  You can run the tests by clicking the
    Meditate button at any time or by pressing the Enter key when filling in any of the tests.


  %h3 Red, Green, Refactor

  %p
    In test-driven development (TDD) the mantra has always been
    %ol
      %li
        %span.red red
        \: write a failing test and run it,
      %li
        %span.green green
        \: write just enough code to make the test pass, and
      %li
        %span.refactor refactor
        \: look at the code to see if you can make it any better.
  %p
    With the Ruby Koans Online,
    %ol
      %li
        the tests will start in the failing state ( background is
        %span.red red
        ),
      %li
        type what you expect the result(s) to be in the input box(es) provided to make the test pass (
        background becomes
        %span.green green
        ),
      %li
        then take a moment to reflect upon the test to see what it is teaching you and, if required,
        improve the code to better communicate its intent (
        %span.refactor refactor
        ).

  .greenbox
    %h3{:style => "color: green"} The happy path

    %p
      For example, type <i>true</i> in the input box below and then click the Meditate button or hit Enter
      to turn the box green.

    =haml :example

  .redbox
    %h3{:style => "color: red"} Straying from the path

    %p
      If the results were not what you expected, the Koans will guide you back to the enlightened path with a hint.
    %p
      Type <i>false</i> in the box below to see the hint displayed.

    =haml :example

    %p
      %h3 "<em>Wait, but it said it expected <u>false</u>! What gives!?</em>"
      The wording comes from the TestUnit framework.<br/>
      In TDD you will write a test with an expectation of how you want the code to behave
      and then write the actual code to make that test pass.<br/>
      %br
      This might seem confusing in the case of the Ruby Koans, where most of the test is usually written for you.<br/>
      In Koans you are providing what <em>your</em> expectation is, so the test framework reports <em>your</em> expectations vs actual results.

